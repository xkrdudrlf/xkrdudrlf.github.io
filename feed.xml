<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://xkrdudrlf.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://xkrdudrlf.github.io/" rel="alternate" type="text/html" /><updated>2021-05-17T00:04:25+00:00</updated><id>https://xkrdudrlf.github.io/feed.xml</id><title type="html">Tom’s Time Capsule</title><subtitle>github blog with jekyll-paginate-v2 (supports paginations for multiple categories) will link it to the github blog site via Travis)</subtitle><entry><title type="html">Dynamic Programming(DP)</title><link href="https://xkrdudrlf.github.io/computer%20science/ds_algo/2021/05/16/Dynamic-Programming(DP)" rel="alternate" type="text/html" title="Dynamic Programming(DP)" /><published>2021-05-16T00:00:00+00:00</published><updated>2021-05-16T00:00:00+00:00</updated><id>https://xkrdudrlf.github.io/computer%20science/ds_algo/2021/05/16/Dynamic%20Programming(DP)</id><content type="html" xml:base="https://xkrdudrlf.github.io/computer%20science/ds_algo/2021/05/16/Dynamic-Programming(DP)">&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;checkbox red&quot;&gt;
  &lt;b&gt;Discalimer&lt;/b&gt;
  This post is solely based on my understanding of the cohavencept.
&lt;/div&gt;
&lt;h1&gt;What is Dynamic Programming?&lt;/h1&gt;
&lt;p&gt;
  &lt;!-- excerpt-start --&gt;
  Dynamic Programming is a technique which solves the problem by solving its
  subproblems in an accumulative manner with the help of memoization. In other
  words, we do not attempt to solve the problem directly. Rather, we try to
  solve its subproblems first so that we can use the results of subproblems for
  solving the original problem. However, there can be many overlapping parts
  among subproblems, so we use another technique called &quot;memoization&quot; to avoid
  re-solving the already solved problem.
&lt;/p&gt;
&lt;p&gt;
  Memoization is a technique where we store the results of subproblems somewhere
  so that we don't need to re-solve the problem again later when we come across
  the subproblem again during DP.
&lt;/p&gt;

&lt;br /&gt;
&lt;h1&gt;Top-Down vs Bottom-Up&lt;/h1&gt;
&lt;p&gt;
  In Dynamic Programming, there are 2 possible approaches to use : Top-down and
  Bottom-Up. Both means what their names literally describe. Top-Down is an
  approach where we start solving the problem from the top(original problem) to
  down(base case) while Bottom-Up is an approach where we start solving the
  problem from the bottom to top.
&lt;/p&gt;
&lt;p&gt;
  Both have asymtotically the same time complexity, but considering that
  Top-Down approach uses a recursive function using a stack, there can be a
  limit for using this approach with regards to the max-depth of a stack. On top
  of that, Bottom-Up approach usually has a better performance in that Top-down
  approach has some overheads incurring from procedural calls like recursive
  function calls. However, in unusual cases where Top-down approach does not
  need to go through all the subproblems, Bottom-up approach can have worse
  performance since it always goes through all the possible sub-problems unlike
  Top-down approach.
&lt;/p&gt;

&lt;br /&gt;

&lt;h1&gt;When can we use Dynamic Programming?&lt;/h1&gt;
&lt;p&gt;
  I think that DP can be used especially when we have the problem which can be
  solved using the results of its subproblems and subproblems also share the
  same solution logic with the original problem.
&lt;/p&gt;
&lt;p&gt;
  Furthermore, if those subproblems are overlapped each other, then DP can be
  very effective strategy with the help of memoization.
&lt;/p&gt;</content><author><name>Tom Tak</name></author><category term="Computer Science" /><summary type="html">Discalimer This post is solely based on my understanding of the cohavencept. What is Dynamic Programming? Dynamic Programming is a technique which solves the problem by solving its subproblems in an accumulative manner with the help of memoization. In other words, we do not attempt to solve the problem directly. Rather, we try to solve its subproblems first so that we can use the results of subproblems for solving the original problem. However, there can be many overlapping parts among subproblems, so we use another technique called &quot;memoization&quot; to avoid re-solving the already solved problem. Memoization is a technique where we store the results of subproblems somewhere so that we don't need to re-solve the problem again later when we come across the subproblem again during DP.</summary></entry><entry><title type="html">v1.01</title><link href="https://xkrdudrlf.github.io/version/2021/05/14/version-log" rel="alternate" type="text/html" title="v1.01" /><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><id>https://xkrdudrlf.github.io/version/2021/05/14/version%20log</id><content type="html" xml:base="https://xkrdudrlf.github.io/version/2021/05/14/version-log">&lt;p&gt;&lt;/p&gt;
&lt;h1&gt;1. A board for update log&lt;/h1&gt;
&lt;p&gt;
  &lt;!-- excerpt-start --&gt;
  Added a new bulletin board for update log. Added a link to the board in the
  header and reduced the header size by 20px.
&lt;/p&gt;
&lt;br /&gt;
&lt;h1&gt;2. Change the internal logic for scrollToTop button&lt;/h1&gt;
&lt;p&gt;
  It was implemented with window.scrollY, but now it's updated to work with
  IntersectionObserverAPI for a better performance.
&lt;/p&gt;
&lt;p&gt;
  Before update:
  &lt;script src=&quot;https://gist.github.com/xkrdudrlf/d65d014faf4c0228c7d4b524e8f69f5a.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
  After update:
  &lt;script src=&quot;https://gist.github.com/xkrdudrlf/247771e0057f1626448b4b6a35af227a.js&quot;&gt;&lt;/script&gt;
&lt;/p&gt;</content><author><name>Tom Tak</name></author><category term="Version" /><summary type="html">1. A board for update log Added a new bulletin board for update log. Added a link to the board in the header and reduced the header size by 20px. 2. Change the internal logic for scrollToTop button It was implemented with window.scrollY, but now it's updated to work with IntersectionObserverAPI for a better performance. Before update: After update:</summary></entry><entry><title type="html">Event Propagation</title><link href="https://xkrdudrlf.github.io/computer%20science/javascript/2021/05/13/Event-Propagation" rel="alternate" type="text/html" title="Event Propagation" /><published>2021-05-13T00:00:00+00:00</published><updated>2021-05-13T00:00:00+00:00</updated><id>https://xkrdudrlf.github.io/computer%20science/javascript/2021/05/13/Event%20Propagation</id><content type="html" xml:base="https://xkrdudrlf.github.io/computer%20science/javascript/2021/05/13/Event-Propagation">&lt;p&gt;&lt;/p&gt;
&lt;h1&gt;Event Propagation: Capturing and Bubbling&lt;/h1&gt;
&lt;p&gt;
  &lt;!-- excerpt-start --&gt;
  &lt;b&gt;Capturing Phase&lt;/b&gt;: When we click on the element, then the parents of the
  element firstly detects the event and start pushing the event down until the
  event reaches the target element.
  &lt;br /&gt;
  &lt;b style=&quot;margin-left: 0.5rem&quot;&gt;Bubbling Phase&lt;/b&gt;: After the capturing phase,
  bubbling phase begins, which means the event starts going up to the parent of
  the target elements until the event reaches the top.
&lt;/p&gt;

&lt;br /&gt;

&lt;h1&gt;Event Propagation in Practice&lt;/h1&gt;
&lt;p&gt;
  .addEventListener usually captures the event during the bubbling phase. To
  modify this so that the event can be captured during the capturing phase, set
  the third parameter of addEventListener function to “true’. But, that is not
  used in most cases.
  &lt;br /&gt;
  &lt;b&gt;Inside .addEventListener:&lt;/b&gt;
  &lt;br /&gt;
  &lt;span style=&quot;margin-left: 1rem&quot;
    &gt;- e.target: indicates where the event happened initially.&lt;/span
  &gt;
  &lt;br /&gt;
  &lt;span style=&quot;margin-left: 1rem&quot;
    &gt;- e.currentTarget: indicates the target to which the eventListener is&lt;/span
  &gt;
  &lt;br /&gt;
  &lt;span style=&quot;margin-left: 1rem&quot;
    &gt;- e.stopPropagation: stops further event propagaion to its parents.&lt;/span
  &gt;
&lt;/p&gt;

&lt;h1&gt;Event Delegation&lt;/h1&gt;
&lt;p&gt;
  Event Delegation is a technique which can be used when we have the common way
  of handling the events with multiple elements.
  &lt;br /&gt;
  Specifically, we capture and handle the event from their common parent element
  when the target elements have the same way of event handling.
  &lt;br /&gt;
  This can be an efficient solution when we have lots of target elements sharing
  same event handling logic since it can save us from having the same multiple
  event handler functions.
&lt;/p&gt;</content><author><name>Tom Tak</name></author><category term="Computer Science" /><summary type="html">Event Propagation: Capturing and Bubbling Capturing Phase: When we click on the element, then the parents of the element firstly detects the event and start pushing the event down until the event reaches the target element. Bubbling Phase: After the capturing phase, bubbling phase begins, which means the event starts going up to the parent of the target elements until the event reaches the top.</summary></entry><entry><title type="html">What is DOM?</title><link href="https://xkrdudrlf.github.io/computer%20science/javascript/2021/05/13/How-Dom-Works" rel="alternate" type="text/html" title="What is DOM?" /><published>2021-05-13T00:00:00+00:00</published><updated>2021-05-13T00:00:00+00:00</updated><id>https://xkrdudrlf.github.io/computer%20science/javascript/2021/05/13/How-Dom-Works</id><content type="html" xml:base="https://xkrdudrlf.github.io/computer%20science/javascript/2021/05/13/How-Dom-Works">&lt;p&gt;&lt;/p&gt;
&lt;h1&gt;What is DOM ?&lt;/h1&gt;
&lt;p&gt;
  &lt;!-- excerpt-start --&gt;
  DOM is a structured representation of HTML documents. It allows JavaScript to
  access the HTML elements and styles to manipulate them.
&lt;/p&gt;
&lt;p&gt;
  &lt;b&gt;DOCUMENT&lt;/b&gt; is the special object that is the entry point to the DOM like
  “document.querySelector()”. And the child of DOM object is the
  &lt;b&gt;&amp;lt;html&amp;gt;&lt;/b&gt; which is the root element of the all HTML elements. Next
  are the &lt;b&gt;&amp;lt;head&amp;gt;&lt;/b&gt; and &lt;b&gt;&amp;lt;body&amp;gt;&lt;/b&gt; elements which are the
  children of the &amp;lt;html&amp;gt; element.
&lt;/p&gt;

&lt;br /&gt;

&lt;h1&gt;DOM !== JavaScript&lt;/h1&gt;
&lt;p&gt;
  DOM methods and properties are not part of JavaScript.
  &lt;b
    &gt;DOM methods and properties are actually part of WEB APIs which are like
    libraries that browsers implement in JavaScript language and we can access
    them from our JavaScript code.&lt;/b
  &gt;
  Since there is actually an official DOM specification each browser has to
  implement, we can do the same DOM manipulations in all browsers.
&lt;/p&gt;</content><author><name>Tom Tak</name></author><category term="Computer Science" /><summary type="html">What is DOM ? DOM is a structured representation of HTML documents. It allows JavaScript to access the HTML elements and styles to manipulate them. DOCUMENT is the special object that is the entry point to the DOM like “document.querySelector()”. And the child of DOM object is the &amp;lt;html&amp;gt; which is the root element of the all HTML elements. Next are the &amp;lt;head&amp;gt; and &amp;lt;body&amp;gt; elements which are the children of the &amp;lt;html&amp;gt; element.</summary></entry><entry><title type="html">395. Longest Substring with At Least K Repeating Characters</title><link href="https://xkrdudrlf.github.io/computer%20science/leetcode/2021/05/13/395" rel="alternate" type="text/html" title="395. Longest Substring with At Least K Repeating Characters" /><published>2021-05-13T00:00:00+00:00</published><updated>2021-05-13T00:00:00+00:00</updated><id>https://xkrdudrlf.github.io/computer%20science/leetcode/2021/05/13/395</id><content type="html" xml:base="https://xkrdudrlf.github.io/computer%20science/leetcode/2021/05/13/395">&lt;!-- prettier-ignore --&gt;
&lt;h1&gt;Description of Problem&lt;/h1&gt;
&lt;p&gt;
  &lt;!-- excerpt-start --&gt;
  This problem is about finding a longest substring where each character of the
  substring repeats at least k times in the substring.
&lt;/p&gt;
&lt;p&gt;
  For example, if we are given (&quot;aabbabcc&quot;, 3) as an input, then we need to find
  a longest substring of &quot;aabbabcc&quot; where each character of the substring
  repeats at least 3 times in the substring. In this case, the answer would be
  &quot;aabbab&quot; since there are at least 3 &quot;a&quot; and &quot;b&quot; in &quot;aabbab&quot;.
&lt;/p&gt;

&lt;h1&gt;Analysis Template&lt;/h1&gt;
&lt;p&gt;&lt;/p&gt;

&lt;div class=&quot;checkbox yellow&quot;&gt;
  &lt;span class=&quot;title-sm&quot;&gt;Input&lt;/span&gt;
  &lt;ul class=&quot;list-no-style&quot;&gt;
    &lt;li&gt;s : a string to search for the longest substring&lt;/li&gt;
    &lt;li&gt;
      k : the number of minimum repeat for each character in the substring
    &lt;/li&gt;
  &lt;/ul&gt;
  &lt;span class=&quot;title-sm m-sm&quot;&gt;Output&lt;/span&gt;
  &lt;ul class=&quot;list-no-style&quot;&gt;
    &lt;li&gt;A length of the longest substr with at least k repeating characters&lt;/li&gt;
  &lt;/ul&gt;
  &lt;span class=&quot;title-sm m-sm&quot;&gt;Constraints&lt;/span&gt;
  &lt;ul class=&quot;list-no-style&quot;&gt;
    &lt;li&gt;1 &lt;= s.length &lt;= 10&lt;sup&gt;4&lt;/sup&gt;&lt;/li&gt;
    &lt;li&gt;1 &lt;= k &lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;span class=&quot;title-sm m-sm&quot;&gt;Edge Cases&lt;/span&gt;
  &lt;ul class=&quot;list-num&quot;&gt;
    &lt;li&gt;k &gt; s.length, return 0&lt;/li&gt;
    &lt;li&gt;k === 1, return 1&lt;/li&gt;
  &lt;/ul&gt;
  &lt;span class=&quot;title-sm m-sm&quot;&gt;Solution&lt;/span&gt;
  &lt;ul class=&quot;list-num&quot;&gt;
    &lt;li&gt;
      Construct a idxTable which is a hashtable containing the frequencies of
      characters in the substring.
    &lt;/li&gt;
    &lt;li&gt;
      Using the idxTable, do partitioning until all fragements from partitioning
      cannot be further partitioned.
    &lt;/li&gt;
    &lt;ul class=&quot;list-no-style&quot;&gt;
      &lt;li&gt;
        - Characters whose frequency is less than k are considered as patitions.
      &lt;/li&gt;
      &lt;li&gt;
        - We do patitioning by breaking down the string into multiple fragments
        based on partitions.
      &lt;/li&gt;
      &lt;li&gt;
        - Partitioning is done recursively. In other words, we do partitioning
        again with fragements if possible and if not return the longest
        partition [Divide and Conquer]
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;
      Get the longest partition among all partitions from recursive partitioning
    &lt;/li&gt;
    &lt;li&gt;If partition.length &gt;= k, then return it. Otherwise, return 0&lt;/li&gt;
  &lt;/ul&gt;
  &lt;span class=&quot;title-sm m-sm&quot;&gt;Complxity Analysis&lt;/span&gt;
  &lt;ul class=&quot;list&quot;&gt;
    &lt;li&gt;Time Complexity&lt;/li&gt;
    &lt;ul class=&quot;list-no-style&quot;&gt;
      &lt;li&gt;
        Time Complexity for each level partitioning is O(N) since we loop
        through all characters in the string only once in total from all
        recursive partitioning to construct an idxTable.
        &lt;br /&gt;
        And the worst case is the case where partitioning is done 26 times with
        each character being a partition per each partitioning level. (There are
        26 character in English.)
        &lt;br /&gt;
        &lt;u&gt;Therefore, Total Time Complexity is O(26 * N = 26N) &lt;/u&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;Space Complexity&lt;/li&gt;
    &lt;ul class=&quot;list-no-style&quot;&gt;
      &lt;li&gt;
        Since the call stack would be the biggest concern in terms of the space
        complexity in this case where we make some recursive function calls, we
        can get the worst time complexity by calculating worst call stack space
        case.
        &lt;br /&gt;
        As already mentioned above in the time complexity analysis section,
        there can be at most 26 partitioning level. So, it indicates that the
        depth of the call stack is also at most 26.
        &lt;br /&gt;
        &lt;u
          &gt;Therefore, Total Space Complexity is O(26) - a depth of the call
          stack&lt;/u
        &gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;h1&gt;Solution Code&lt;/h1&gt;
&lt;script src=&quot;https://gist.github.com/xkrdudrlf/d7262e3164ded3cde187397a417d3631.js&quot;&gt;&lt;/script&gt;</content><author><name>Tom Tak</name></author><category term="Computer Science" /><summary type="html">Description of Problem This problem is about finding a longest substring where each character of the substring repeats at least k times in the substring. For example, if we are given (&quot;aabbabcc&quot;, 3) as an input, then we need to find a longest substring of &quot;aabbabcc&quot; where each character of the substring repeats at least 3 times in the substring. In this case, the answer would be &quot;aabbab&quot; since there are at least 3 &quot;a&quot; and &quot;b&quot; in &quot;aabbab&quot;.</summary></entry><entry><title type="html">Personal Blog</title><link href="https://xkrdudrlf.github.io/computer%20science/project/2021/05/11/Personal-Blog" rel="alternate" type="text/html" title="Personal Blog" /><published>2021-05-11T00:00:00+00:00</published><updated>2021-05-11T00:00:00+00:00</updated><id>https://xkrdudrlf.github.io/computer%20science/project/2021/05/11/Personal%20Blog</id><content type="html" xml:base="https://xkrdudrlf.github.io/computer%20science/project/2021/05/11/Personal-Blog">&lt;div class=&quot;checkbox blue&quot;&gt;
  &lt;span class=&quot;title&quot;&gt;Project Period&lt;/span&gt;
  &lt;ul class=&quot;list&quot;&gt;
    &lt;li&gt;2021.05.03 ~ 2021.05.11(8 days)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;checkbox yellow&quot;&gt;
  &lt;span class=&quot;title&quot;&gt;Stack&lt;/span&gt;
  &lt;ul class=&quot;list&quot;&gt;
    &lt;li&gt;HTML&lt;/li&gt;
    &lt;li&gt;CSS&lt;/li&gt;
    &lt;li&gt;JavaScript&lt;/li&gt;
    &lt;li&gt;Github Pages with Jekyll/Liquid&lt;/li&gt;
    &lt;li&gt;Travis CI&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;checkbox red&quot; style=&gt;
  &lt;span class=&quot;title&quot;&gt;Architectural Design&lt;/span&gt;
  &lt;img src=&quot;/assets/images/blog-project-flowchart.jpg&quot; alt=&quot;architectural-design-img&quot;&gt;
&lt;/div&gt;

&lt;p&gt;
  &lt;!-- excerpt-start --&gt;
  I've already tried documenting how I've worked this project out in &lt;a href=&quot;https://drive.google.com/file/d/1lPEZ2S2H9H7TzRyUsoujRQBjT8gLaeGs/view?usp=sharing&quot;&gt;MS Word document&lt;/a&gt;. 
  Plus, &lt;a href=&quot;https://drive.google.com/file/d/1OlRWm-wyYyH6370BLH9LoysII9_l6aIv/view?usp=sharing&quot;&gt;Architectural design&lt;/a&gt; is also available just in case the img above is too small to see.
&lt;/p&gt;
&lt;h1&gt;Think and plan ahead before action&lt;/h1&gt;
&lt;p&gt;
  During the project, I think I got confused a lot especially about the details of a design.
  And I think it is because I really haven't thought my design through before the start of 
  implementation phase. In other words, the initial skeleton design lacked details.
&lt;/p&gt;
&lt;p&gt;
  As a result, I had to design the lacked details along the way during the implmentation 
  phase which caused lot of confusion and inefficiency.
  I don't think I still can design 100% eveyrthing perfectly from the start.
  Obviously, there can be some errors and trials at some point with regards to the design.
  But, it would've been not that chaotic as I've gone through this time, if I had carefully designed
  the skeleton in the initial design phase. I was just rushed to put something out there, being impatient.
&lt;/p&gt;
&lt;p&gt;
 So, if I do the project next time, I will probably try to put more time and effort in the 
 initial design phase to minimize the possible confusion which can incur during the next
 implmentation phase.
&lt;/p&gt;</content><author><name>Tom Tak</name></author><category term="Computer Science" /><summary type="html">Project Period 2021.05.03 ~ 2021.05.11(8 days) Stack HTML CSS JavaScript Github Pages with Jekyll/Liquid Travis CI Architectural Design</summary></entry><entry><title type="html">Final Touch</title><link href="https://xkrdudrlf.github.io/daily/2021/2021/05/11/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%99%84%EA%B3%B5" rel="alternate" type="text/html" title="Final Touch" /><published>2021-05-11T00:00:00+00:00</published><updated>2021-05-11T00:00:00+00:00</updated><id>https://xkrdudrlf.github.io/daily/2021/2021/05/11/%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EC%99%84%EA%B3%B5</id><content type="html" xml:base="https://xkrdudrlf.github.io/daily/2021/2021/05/11/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%99%84%EA%B3%B5">&lt;!-- prettier-ignore --&gt;
&lt;div class=&quot;checkbox yellow&quot;&gt;
  &lt;span class=&quot;title&quot;&gt;Today&lt;/span&gt;
  &lt;ul class=&quot;list&quot;&gt;
    &lt;li&gt;블로그 고정 ^Top 버튼 구현 완료&lt;/li&gt;
    &lt;li&gt;블로그 프로젝트 관련 문서화 작업 후 포스팅 완료&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;div class=&quot;checkbox blue&quot;&gt;
  &lt;span class=&quot;title&quot;&gt;Tommorrow&lt;/span&gt;
  &lt;ul class=&quot;list&quot;&gt;
    &lt;li&gt;자바스크립트 13강 복습하고 내용 필기해서 문서화하기&lt;/li&gt;
    &lt;li&gt;Leetcode 3문제 풀어보기(String Manipulation,Merge Sort)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;
  &lt;!-- excerpt-start --&gt;
  오늘 드디어 내 생애 첫 블로그를 완공했다. 지난 주 월요일부터 대충 일주일 정도
  걸린 셈인데.. 만들어놓고 나니 후련하기도 하고 또 내 딴에 새끼(?)라고 자꾸
  눈이가고 뭔가 자꾸 또 뜯어고치고 싶다. &lt;strike&gt;(다메다요 브라더)&lt;/strike&gt; 이제
  그만 자제해야겠지.. 디자이너가 될거는 아니자나.. 코딩도 할게 산더미인데,
  어찌됬건 이번 프로젝트를 통해 HTML/CSS는 대충 연습한 것 같고
  &lt;strike
    &gt;(사실 HTML/CSS 보다는 Jekyll 이랑 다른 여타 잡다한 것들을 픽업하느라 대부분
    시간을 보낸듯.. 아 그리고 쓸데없이 꺠알 디자인 해보겠다 시간낭비..)&lt;/strike
  &gt;
  다음 단계인 자바스크립트를 본격적으로 파야겠다. 그리고 복습이 끝나면 다음
  프로젝트를 생각해보면 되겠지.. 흠..
&lt;/p&gt;
&lt;p&gt;
  아 그리고 쓰다 알게 된 건데 이 핸드라이팅 폰트고 스탠다드 폰트고 한글은 지원을
  안하는구나.. 한글을 위한 폰트를 또 따로 찾아야되나(귀찮) 그리고 한글이랑
  영어를 동시에 쓰게되면 토글 버튼을 만들어서 선택적으로 볼 수 있게 해주고
  싶은데.. 이렇게 하나하나 추가하다보면 정말 이 블로그 프로젝트는 끝이 없을
  듯하다. 사실 다크모드도 한 번 구현해보고 싶었는데..
&lt;/p&gt;
&lt;p&gt;
  그동안 블로그 프로젝트에 하루종일 매달리느라 자료구조/알고리즘 릿콧 문제푸는걸
  거의 안하다시피 했는데, 내일부터는 아니 이거 쓰고나서 오늘밤 부터라도 다시
  불을 붙여서 열심히 풀도록 해야겠다. 갈 길이 멀다!
&lt;/p&gt;</content><author><name>Tom Tak</name></author><category term="Daily" /><summary type="html">Today 블로그 고정 ^Top 버튼 구현 완료 블로그 프로젝트 관련 문서화 작업 후 포스팅 완료</summary></entry><entry><title type="html">Finished a blog project</title><link href="https://xkrdudrlf.github.io/daily/2021/2021/05/10/Finished-building-up-a-blog" rel="alternate" type="text/html" title="Finished a blog project" /><published>2021-05-10T00:00:00+00:00</published><updated>2021-05-10T00:00:00+00:00</updated><id>https://xkrdudrlf.github.io/daily/2021/2021/05/10/Finished%20building%20up%20a%20blog</id><content type="html" xml:base="https://xkrdudrlf.github.io/daily/2021/2021/05/10/Finished-building-up-a-blog">&lt;!-- prettier-ignore --&gt;
&lt;div class=&quot;checkbox yellow&quot;&gt;
  &lt;span class=&quot;title&quot;&gt;Today&lt;/span&gt;
  &lt;ul class=&quot;list&quot;&gt;
    &lt;li&gt;Implemented additional minor features(comment section with Disqus(?)/email address clipboard copy) to the blog&lt;/li&gt;
    &lt;li&gt;Added Responsiveness to the blog(small,medium,(deault),large sizes)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;div class=&quot;checkbox blue&quot;&gt;
  &lt;span class=&quot;title&quot;&gt;Tommorrow&lt;/span&gt;
  &lt;ul class=&quot;list&quot;&gt;
    &lt;li&gt;Implement Fixed ^Top Icon on the right bottom of the blog&lt;/li&gt;
    &lt;li&gt;
      Try solving 3 LeetCode problem(related to 2 topics: String Manipulation,
      Merge Sort)
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;
  &lt;!-- excerpt-start --&gt;
  Finally, I see the end of this project though there won't be end if i really
  purse the perfection. But, at least for now, except the fixed ^Top icon
  button, Basic functionalities of blog are implemented I think. More than
  anything, I found myself spending too much time mostly on visual design, which
  shouldn't be my priority though I enjoyed doing it. I've got tons of things to
  learn and I am still even not good with Javascript. So I think i will just
  wrap this project up this point.
&lt;/p&gt;
&lt;p&gt;
  Since I started building this blog up last Monday. It took exactly about a
  week for me to build this blog. I really didn't expect it to take this much
  time since I already knew how to create static pages with html/css/js.
&lt;/p&gt;
&lt;p&gt;
  It took a bit of time until I feel like digging a rabbit hole. Firstly, I
  learnt that Github Pages is run with Jekyll, so I picked it up. Soon, I also
  realized that I need to use bit of Liquid to use Jekyll efficiently.. So i
  picked up bit of Liquid and that wasnt the end of course. Jekyll Plugins, Git
  submodule, Travis CI.. I've learnt much more than I expected from the project.
  I still don't think I really picked up Everything completly. But, at least, I
  think I understand most of them on a conceptual level and I feel now bit
  confident with Jekyll and Liquid though I am not sure when I will use it again
&lt;/p&gt;
&lt;p&gt;
  Since I started studying CS at Uni, I really didn't have enough time or mental
  energy. I managed to pass the courses fortunetely, but was mostly at the brink
  of mental breakdown due to my personal problems. Thanks to Corona virus, now I
  came back home and and finally picking up the broken pieces of myself with the
  help of my family. And this is the first project ever I've done myself from
  the start to the end. Hope that this would be the turning point to put my life
  back on the route. Never Give up !
&lt;/p&gt;</content><author><name>Tom Tak</name></author><category term="Daily" /><summary type="html">Today Implemented additional minor features(comment section with Disqus(?)/email address clipboard copy) to the blog Added Responsiveness to the blog(small,medium,(deault),large sizes)</summary></entry><entry><title type="html">Let’s Finish</title><link href="https://xkrdudrlf.github.io/daily/2021/2021/05/09/Let's-Finish" rel="alternate" type="text/html" title="Let’s Finish" /><published>2021-05-09T00:00:00+00:00</published><updated>2021-05-09T00:00:00+00:00</updated><id>https://xkrdudrlf.github.io/daily/2021/2021/05/09/Let's%20Finish</id><content type="html" xml:base="https://xkrdudrlf.github.io/daily/2021/2021/05/09/Let's-Finish">&lt;!-- prettier-ignore --&gt;
&lt;div class=&quot;checkbox yellow&quot;&gt;
  &lt;span class=&quot;title&quot;&gt;Today&lt;/span&gt;
  &lt;ul class=&quot;list&quot;&gt;
    &lt;li&gt;Blog - navBar current feature implemented&lt;/li&gt;
    &lt;li&gt;Blog - navBar total posts display feature implemented&lt;/li&gt;
    &lt;li&gt;Blog - Post design finished and implmented Post template based on the design&lt;/li&gt;
    &lt;li&gt;Blog - Implemented sub-pagination feature in Post Design&lt;/li&gt;
    &lt;li&gt;Fixed bugs with regards to the navBar route&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;div class=&quot;checkbox blue&quot;&gt;
  &lt;span class=&quot;title&quot;&gt;Tommorrow&lt;/span&gt;
  &lt;ul class=&quot;list&quot;&gt;
    &lt;li&gt;Fix minor bug with navBar completely&lt;/li&gt;
    &lt;li&gt;Design and implement a header to the blog&lt;/li&gt;
    &lt;li&gt;Add a comment feature on each post&lt;/li&gt;
    &lt;li&gt;Try wrapping up the project by finishing above 3 features&lt;/li&gt;
    &lt;li&gt;Try solving 2 LeetCode problems (Trie/Stack/Queue)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;
  &lt;!-- excerpt-start --&gt;
  It was too busy today.. and its alreayd almost 2am.. All i did was to
  implement features on my blog. I can see some progresses and feel that i
  almost finished this project. Lets wrap it up till wednesday..
  &lt;br /&gt;
  btw.. i really need to do some DS/Algo on LeetCode :..(
&lt;/p&gt;</content><author><name>Tom TakA</name></author><category term="Daily" /><summary type="html">Today Blog - navBar current feature implemented Blog - navBar total posts display feature implemented Blog - Post design finished and implmented Post template based on the design Blog - Implemented sub-pagination feature in Post Design Fixed bugs with regards to the navBar route</summary></entry><entry><title type="html">Reset</title><link href="https://xkrdudrlf.github.io/daily/2021/2021/05/08/Reset" rel="alternate" type="text/html" title="Reset" /><published>2021-05-08T00:00:00+00:00</published><updated>2021-05-08T00:00:00+00:00</updated><id>https://xkrdudrlf.github.io/daily/2021/2021/05/08/Reset</id><content type="html" xml:base="https://xkrdudrlf.github.io/daily/2021/2021/05/08/Reset">&lt;!-- prettier-ignore --&gt;
&lt;div class=&quot;checkbox yellow&quot;&gt;
  &lt;span class=&quot;title&quot;&gt;Today&lt;/span&gt;
  &lt;ul class=&quot;list&quot;&gt;
    &lt;li&gt;Blog website finally working with Travis CI&lt;/li&gt;
    &lt;li&gt;Documented Blog Project on Word - need to put it up here on the blog later&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;div class=&quot;checkbox blue&quot;&gt;
  &lt;span class=&quot;title&quot;&gt;Tommorrow&lt;/span&gt;
  &lt;ul class=&quot;list&quot;&gt;
    &lt;li&gt;Finish Designing/Implementing Post/Footer Section of Blog&lt;/li&gt;
    &lt;li&gt;Make the blog responsive to various viewport sizes(Web/Tab/Mobile)&lt;/li&gt;
    &lt;li&gt;Try solving 2 LeetCode problems (Trie/Stack/Queue)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;
  &lt;!-- excerpt-start --&gt;
  Today was very confusing day with ups and downs. At least till this morning, I
  was so happy that I finally get my blog work with Travis CI, which was the
  most hardest part for me. And The only thing left for me to do was just same
  designing and implementing phase for post/footer and bit of media queries to
  make the blog site responsive.
&lt;/p&gt;
&lt;p&gt;
  Being hopeful, after lunch, I strated documenting what I've done so far in the
  project for the future reference and to record my learnings from this project.
  And it was also not that bad, I quite enjoyed writing it out.
&lt;/p&gt;
&lt;p&gt;
  And after that, around dinner time, eveyrthing started getting hairy all of a
  sudden.. My vscode terminal starts not showing anything just being blank for
  no reason. And that completely sent me on a wild-goose chase since it turned
  out that there was nothing wrong with me, rahter it was due to some mysterious
  incompatibility existing between VS Code and my zsh theme (10k sth whatever).
&lt;/p&gt;
&lt;p&gt;
  Till I finally figured that out, I literally uninstalled and installed
  everything suspcious.. literally everything.. I firstly reset my zsh thinking
  i might've modified some parts accidentally and VS Code after that. In the
  end, after finding out what is the cause, i had to revert every set up env
  back to what they were which was another pain in the neck 😥😥.
&lt;/p&gt;
&lt;p&gt;
  Anyway... I'm just trying to think that it was an another good revision of how
  VS Code work and zsh.. (&lt;strike&gt;Nope&lt;/strike&gt;).
&lt;/p&gt;</content><author><name>Tom Tak</name></author><category term="Daily" /><summary type="html">Today Blog website finally working with Travis CI Documented Blog Project on Word - need to put it up here on the blog later</summary></entry></feed>